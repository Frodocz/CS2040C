2017-18-S2-Midterm-meduim (100/100)
Section A --> 10/10
1. O(1)
2. O(n)
3. O(n)
4. O(n log n)
5. O(log n)
6. O(n)
7. O(1)
8. O(1)
9. O(n)
10. O(1)

Section B
1. Wrong, C libraries are compatible in C++
2. Wrong, quick sort is not stable, (also not fastest)
3. True, it has an additional prev Vertex pointer
4. True, vector element retrival is O(1)
5. True, all vector operations are defined in deque

Section C
1. Non-Compact std::vector Implementation for List ADT 
(a). To insert a value (not the back), we need to start from the first element and count the non-empty elements, which is O(n). We then need to shift all elements after the insertion point to the left if at that place there's no gap exists, which is also O(n)
(b). Insert at back is still O(1) by calling push_back()
(c). Remove an element at index i takes O(n), and leaves a gap
(d). It's easy to remove the last or first element, O(1)
(e). Cannoot sort directly

2. Singly/e Linked List without Tail Pointer
(a). Remove front is still O(1)
(b). Insert at front is still O(1)
(c). Insert at middle is O(N)
(d). Remove back is O(N)
(e). Remove middle is O(N)

Section D
1. Special Sorting Criteria 
#include <bits/stdc++.h>
using namespace std;

bool comp(string &a, string &b) {
    string ra = string(a.rbegin(), a.rend());
    string rb = string(b.rbegin(), b.rend());
    return ra < rb;
}

int main() {
    string name;
    vector<string> names;
    while (cin >> name, !cin.eof()) { // if can read name in one line (not EOF yet)
        names.push_back(name);
    }

    sort(names.begin(), names.end(), comp);

    for (auto s : names) {
        cout << s << "\n";
    }

    return 0;
} // the overall time complexity of my C++ code above is O(MN + NM log N)

2. PS1 - Continuous Median (version IV)
#include <bits/stdc++.h> // you have to complete this question using C++ code using namespace std;
int main() {
	ios::sync_with_stdio(false); cin.tie(NULL); // N is gigantic, we need fast I/O 
	int TC, N, Ai;
	cin >> TC; // always 1 test case for this version IV
	cin >> N;
	long long ans = 0;
	long long count1 = 0, count2 = 0, count3 = 0;

	for (int i = 0; i < N; i++) {
		cin >> Ai; // this time, 1 <= Ai <= 3
	    if (Ai == 1) ++count1;
	   	else if (Ai == 2) ++count2;
	   	else ++count3;
	}

	// if N odd, k = N/2; else k1 = N/2 -1, k2 = N/2
	int ans = N / 2;
	if (N % 2 == 1) {
		if (k < count1) cout << 1;
		else if (k >= count1 && k < count1 + count2) cout << 2;
		else cout << 3;	
	} else {
		if (k < count1) cout << 1;
		else if (k == count1) cout << 1.5;
		else if (k > count1 && k < count1 + count2) cout << 2;
		else if (k == count1 + count2) cout << 2.5;
		else cout << 3;
	}
	

	cout << ans << endl;
	return 0;
} // the overall time complexity of my C++ code above is O(N)

